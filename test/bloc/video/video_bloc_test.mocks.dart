// Mocks generated by Mockito 5.4.6 from annotations
// in backdrp_fm/test/bloc/video/video_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:backdrp_fm/models/video.dart' as _i4;
import 'package:backdrp_fm/services/video_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [VideoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoService extends _i1.Mock implements _i2.VideoService {
  MockVideoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.Video>> getPublishedVideos() => (super.noSuchMethod(
        Invocation.method(#getPublishedVideos, []),
        returnValue: _i3.Stream<List<_i4.Video>>.empty(),
      ) as _i3.Stream<List<_i4.Video>>);

  @override
  _i3.Stream<List<_i4.Video>> getFeaturedVideos({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(#getFeaturedVideos, [], {#limit: limit}),
        returnValue: _i3.Stream<List<_i4.Video>>.empty(),
      ) as _i3.Stream<List<_i4.Video>>);

  @override
  _i3.Stream<List<_i4.Video>> getVideosByArtist(String? artistId) =>
      (super.noSuchMethod(
        Invocation.method(#getVideosByArtist, [artistId]),
        returnValue: _i3.Stream<List<_i4.Video>>.empty(),
      ) as _i3.Stream<List<_i4.Video>>);

  @override
  _i3.Stream<List<_i4.Video>> getFilteredVideos({
    String? genre,
    String? artistId,
    DateTime? fromDate,
    DateTime? toDate,
    String? city,
    String? country,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getFilteredVideos, [], {
          #genre: genre,
          #artistId: artistId,
          #fromDate: fromDate,
          #toDate: toDate,
          #city: city,
          #country: country,
        }),
        returnValue: _i3.Stream<List<_i4.Video>>.empty(),
      ) as _i3.Stream<List<_i4.Video>>);

  @override
  _i3.Future<_i4.Video?> getVideo(String? id) => (super.noSuchMethod(
        Invocation.method(#getVideo, [id]),
        returnValue: _i3.Future<_i4.Video?>.value(),
      ) as _i3.Future<_i4.Video?>);

  @override
  _i3.Future<String?> addVideo({
    required String? youtubeUrl,
    required String? title,
    required String? artist,
    required String? artistId,
    required String? description,
    required List<String>? genres,
    required String? venue,
    required String? city,
    required String? country,
    required int? duration,
    DateTime? recordedDate,
    String? status = 'draft',
    bool? featured = false,
    int? sortOrder = 0,
    List<String>? tags = const [],
    double? latitude,
    double? longitude,
    String? soundcloudUrl,
    String? spotifyPlaylistId,
    String? appleMusicPlaylistId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#addVideo, [], {
          #youtubeUrl: youtubeUrl,
          #title: title,
          #artist: artist,
          #artistId: artistId,
          #description: description,
          #genres: genres,
          #venue: venue,
          #city: city,
          #country: country,
          #duration: duration,
          #recordedDate: recordedDate,
          #status: status,
          #featured: featured,
          #sortOrder: sortOrder,
          #tags: tags,
          #latitude: latitude,
          #longitude: longitude,
          #soundcloudUrl: soundcloudUrl,
          #spotifyPlaylistId: spotifyPlaylistId,
          #appleMusicPlaylistId: appleMusicPlaylistId,
        }),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<bool> updateVideo(String? id, Map<String, dynamic>? updates) =>
      (super.noSuchMethod(
        Invocation.method(#updateVideo, [id, updates]),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteVideo(String? id, String? artistId) =>
      (super.noSuchMethod(
        Invocation.method(#deleteVideo, [id, artistId]),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> toggleLike(String? videoId, String? userId) =>
      (super.noSuchMethod(
        Invocation.method(#toggleLike, [videoId, userId]),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> toggleSave(String? videoId, String? userId) =>
      (super.noSuchMethod(
        Invocation.method(#toggleSave, [videoId, userId]),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> incrementViews(String? videoId) => (super.noSuchMethod(
        Invocation.method(#incrementViews, [videoId]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
