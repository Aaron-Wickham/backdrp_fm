rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Videos - published videos are public, all operations require admin
    match /videos/{videoId} {
      allow read: if resource.data.status == 'published' || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Artists - public read, admin write
    match /artists/{artistId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Users - users can read/update their own profile, admin can do anything
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if isOwner(userId);
      allow delete: if isAdmin();
    }

    // Playlists - public read, admin write
    match /playlists/{playlistId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Mailing list - users can manage their own subscription, admin can do anything
    match /mailingList/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if isOwner(userId);
      allow delete: if isAdmin();
    }
  }
}
