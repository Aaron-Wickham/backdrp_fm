rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin (checks environment-specific users collection)
    function isAdminDev() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/dev_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAdminStaging() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/staging_users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAdminProd() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // ========================================
    // DEVELOPMENT COLLECTIONS (dev_*)
    // ========================================

    match /dev_videos/{videoId} {
      allow read: if resource.data.status == 'published' || isAdminDev();
      allow create, update, delete: if isAdminDev();
    }

    match /dev_artists/{artistId} {
      allow read: if true;
      allow create, update, delete: if isAdminDev();
    }

    match /dev_users/{userId} {
      allow read: if isOwner(userId) || isAdminDev();
      allow create, update: if isOwner(userId);
      allow delete: if isAdminDev();
    }

    match /dev_playlists/{playlistId} {
      allow read: if true;
      allow create, update, delete: if isAdminDev();
    }

    match /dev_mailingList/{userId} {
      allow read: if isOwner(userId) || isAdminDev();
      allow create, update: if isOwner(userId);
      allow delete: if isAdminDev();
    }

    // ========================================
    // STAGING COLLECTIONS (staging_*)
    // ========================================

    match /staging_videos/{videoId} {
      allow read: if resource.data.status == 'published' || isAdminStaging();
      allow create, update, delete: if isAdminStaging();
    }

    match /staging_artists/{artistId} {
      allow read: if true;
      allow create, update, delete: if isAdminStaging();
    }

    match /staging_users/{userId} {
      allow read: if isOwner(userId) || isAdminStaging();
      allow create, update: if isOwner(userId);
      allow delete: if isAdminStaging();
    }

    match /staging_playlists/{playlistId} {
      allow read: if true;
      allow create, update, delete: if isAdminStaging();
    }

    match /staging_mailingList/{userId} {
      allow read: if isOwner(userId) || isAdminStaging();
      allow create, update: if isOwner(userId);
      allow delete: if isAdminStaging();
    }

    // ========================================
    // PRODUCTION COLLECTIONS
    // ========================================

    match /videos/{videoId} {
      allow read: if resource.data.status == 'published' || isAdminProd();
      allow create, update, delete: if isAdminProd();
    }

    match /artists/{artistId} {
      allow read: if true;
      allow create, update, delete: if isAdminProd();
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdminProd();
      allow create, update: if isOwner(userId);
      allow delete: if isAdminProd();
    }

    match /playlists/{playlistId} {
      allow read: if true;
      allow create, update, delete: if isAdminProd();
    }

    match /mailingList/{userId} {
      allow read: if isOwner(userId) || isAdminProd();
      allow create, update: if isOwner(userId);
      allow delete: if isAdminProd();
    }
  }
}
